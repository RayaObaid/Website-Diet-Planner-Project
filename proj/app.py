{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a138a880",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [19/Sep/2024 23:10:44] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [19/Sep/2024 23:12:49] \"POST / HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import random\n",
    "from flask import Flask, render_template, request\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "app_id = \"de88bad7\"  # Your API app ID\n",
    "app_key = \"794c067d87e1a94649aa25a00ed3c2a2\"  # Your API app key\n",
    "daily_calorie_goal = 1800\n",
    "\n",
    "# Function to get recipes based on meal type and calorie range\n",
    "def get_meal(meal_type, min_calories, max_calories, filters):\n",
    "    url = f\"https://api.edamam.com/search?q={meal_type}&app_id={app_id}&app_key={app_key}&calories={min_calories}-{max_calories}&from=0&to=10\"\n",
    "    \n",
    "    # Add filters to the API query\n",
    "    if filters.get('health'):\n",
    "        health_filters = '&health=' + '&health='.join(filters['health'])\n",
    "        url += health_filters\n",
    "    if filters.get('exclude'):\n",
    "        exclude_filters = '&excluded=' + '&excluded='.join(filters['exclude'])\n",
    "        url += exclude_filters\n",
    "    \n",
    "    response = requests.get(url)\n",
    "    data = response.json()\n",
    "    if data.get('hits'):\n",
    "        return data['hits']\n",
    "    return []\n",
    "\n",
    "# Function to generate a meal plan for a single day\n",
    "def generate_day_plan(filters):\n",
    "    # Calculate calorie ranges for each meal\n",
    "    breakfast_calories = daily_calorie_goal * 0.25\n",
    "    lunch_calories = daily_calorie_goal * 0.35\n",
    "    dinner_calories = daily_calorie_goal * 0.35\n",
    "    snack_calories = daily_calorie_goal * 0.05\n",
    "\n",
    "    # Get meals\n",
    "    breakfast_recipes = get_meal('breakfast', int(breakfast_calories * 0.8), int(breakfast_calories * 1.2), filters)\n",
    "    lunch_recipes = get_meal('lunch', int(lunch_calories * 0.8), int(lunch_calories * 1.2), filters)\n",
    "    dinner_recipes = get_meal('dinner', int(dinner_calories * 0.8), int(dinner_calories * 1.2), filters)\n",
    "    snack_recipes = get_meal('snack', int(snack_calories * 0.8), int(snack_calories * 1.2), filters)\n",
    "\n",
    "    def select_random_recipe(recipes):\n",
    "        if recipes:\n",
    "            return random.choice(recipes)['recipe']\n",
    "        return None\n",
    "\n",
    "    return {\n",
    "        \"Breakfast\": select_random_recipe(breakfast_recipes),\n",
    "        \"Lunch\": select_random_recipe(lunch_recipes),\n",
    "        \"Dinner\": select_random_recipe(dinner_recipes),\n",
    "        \"Snack\": select_random_recipe(snack_recipes)\n",
    "    }\n",
    "\n",
    "# Function to create filters based on user input\n",
    "def create_filters(health_condition, ingredients_like, ingredients_dislike):\n",
    "    filters = {\n",
    "        'health': [],  # Edamam health labels\n",
    "        'exclude': []\n",
    "    }\n",
    "\n",
    "    # Add health condition filters\n",
    "    if health_condition == \"diabetes\":\n",
    "        filters['health'].append(\"sugar-conscious\")\n",
    "    elif health_condition == \"hypertension\":\n",
    "        filters['health'].append(\"low-sodium\")\n",
    "    elif health_condition == \"gluten_intolerance\":\n",
    "        filters['health'].append(\"gluten-free\")\n",
    "\n",
    "    # Add ingredient preferences\n",
    "    if ingredients_like:\n",
    "        filters['include'] = ingredients_like.split(',')\n",
    "    if ingredients_dislike:\n",
    "        filters['exclude'] = ingredients_dislike.split(',')\n",
    "\n",
    "    return filters\n",
    "\n",
    "# Route to display form for user input\n",
    "@app.route('/', methods=['GET', 'POST'])\n",
    "def index():\n",
    "    if request.method == 'POST':\n",
    "        # Get user inputs\n",
    "        daily_calorie_goal = int(request.form['calories'])\n",
    "        health_condition = request.form['health_condition']\n",
    "        ingredients_like = request.form['ingredients_like']\n",
    "        ingredients_dislike = request.form['ingredients_dislike']\n",
    "\n",
    "        # Create filters\n",
    "        filters = create_filters(health_condition, ingredients_like, ingredients_dislike)\n",
    "\n",
    "        # Generate monthly meal plan\n",
    "        monthly_plan = {}\n",
    "        for day in range(1, 31):\n",
    "            day_plan = generate_day_plan(filters)\n",
    "            monthly_plan[day] = day_plan\n",
    "        \n",
    "        return render_template('month_result.html', meal_plan=monthly_plan)\n",
    "\n",
    "    return render_template('index.html')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4f09e18",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [19/Sep/2024 23:34:07] \"GET / HTTP/1.1\" 200 -\n",
      "[2024-09-19 23:34:16,732] ERROR in app: Exception on / [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"C:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_6848\\2604360253.py\", line 139, in index\n",
      "    day_plan, nutrition = generate_day_plan(filters)\n",
      "  File \"C:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_6848\\2604360253.py\", line 83, in generate_day_plan\n",
      "    breakfast_recipes = get_meal('breakfast', int(breakfast_calories * 0.8), int(breakfast_calories * 1.2), filters)\n",
      "  File \"C:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_6848\\2604360253.py\", line 57, in get_meal\n",
      "    if data.get('hits'):\n",
      "AttributeError: 'str' object has no attribute 'get'\n",
      "127.0.0.1 - - [19/Sep/2024 23:34:16] \"POST / HTTP/1.1\" 500 -\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import random\n",
    "import plotly.graph_objs as go\n",
    "from flask import Flask, render_template, request\n",
    "import json\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "app_id = \"de88bad7\"\n",
    "app_key = \"794c067d87e1a94649aa25a00ed3c2a2\"\n",
    "daily_calorie_goal = 1800\n",
    "\n",
    "# Function to save user feedback (like/dislike)\n",
    "def save_feedback(meal_label, feedback):\n",
    "    feedback_file = \"user_feedback.json\"\n",
    "    try:\n",
    "        with open(feedback_file, 'r') as f:\n",
    "            feedback_data = json.load(f)\n",
    "    except FileNotFoundError:\n",
    "        feedback_data = {}\n",
    "\n",
    "    feedback_data[meal_label] = feedback\n",
    "\n",
    "    with open(feedback_file, 'w') as f:\n",
    "        json.dump(feedback_data, f, indent=4)\n",
    "\n",
    "# Function to load feedback\n",
    "def load_feedback():\n",
    "    feedback_file = \"user_feedback.json\"\n",
    "    try:\n",
    "        with open(feedback_file, 'r') as f:\n",
    "            return json.load(f)\n",
    "    except FileNotFoundError:\n",
    "        return {}\n",
    "\n",
    "# Function to create filters based on user inputs (you need to define this)\n",
    "def create_filters(health_condition, ingredients_like, ingredients_dislike):\n",
    "    filters = {\n",
    "        'health': health_condition.split(\",\") if health_condition else [],\n",
    "        'exclude': ingredients_dislike.split(\",\") if ingredients_dislike else []\n",
    "    }\n",
    "    return filters\n",
    "\n",
    "# Function to get recipes based on meal type and calorie range\n",
    "def get_meal(meal_type, min_calories, max_calories, filters):\n",
    "    url = f\"https://api.edamam.com/search?q={meal_type}&app_id={app_id}&app_key={app_key}&calories={min_calories}-{max_calories}&from=0&to=10\"\n",
    "    \n",
    "    if filters.get('health'):\n",
    "        health_filters = '&health=' + '&health='.join(filters['health'])\n",
    "        url += health_filters\n",
    "    if filters.get('exclude'):\n",
    "        exclude_filters = '&excluded=' + '&excluded='.join(filters['exclude'])\n",
    "        url += exclude_filters\n",
    "    \n",
    "    response = requests.get(url)\n",
    "    data = response.json()\n",
    "    if data.get('hits'):\n",
    "        return data['hits']\n",
    "    return []\n",
    "\n",
    "# Function to select a random recipe, avoiding disliked meals\n",
    "def select_random_recipe(recipes, feedback):\n",
    "    disliked_meals = [meal for meal, fb in feedback.items() if fb == 'dislike']\n",
    "    \n",
    "    if recipes:\n",
    "        filtered_recipes = [recipe['recipe'] for recipe in recipes if recipe['recipe']['label'] not in disliked_meals]\n",
    "        \n",
    "        if filtered_recipes:\n",
    "            return random.choice(filtered_recipes)\n",
    "        return random.choice([recipe['recipe'] for recipe in recipes])\n",
    "    \n",
    "    return None\n",
    "\n",
    "# Function to generate a meal plan for a single day and track nutrition\n",
    "def generate_day_plan(filters):\n",
    "    feedback = load_feedback()  # Load user feedback before generating the meal plan\n",
    "    \n",
    "    breakfast_calories = daily_calorie_goal * 0.25\n",
    "    lunch_calories = daily_calorie_goal * 0.35\n",
    "    dinner_calories = daily_calorie_goal * 0.35\n",
    "    snack_calories = daily_calorie_goal * 0.05\n",
    "\n",
    "    breakfast_recipes = get_meal('breakfast', int(breakfast_calories * 0.8), int(breakfast_calories * 1.2), filters)\n",
    "    lunch_recipes = get_meal('lunch', int(lunch_calories * 0.8), int(lunch_calories * 1.2), filters)\n",
    "    dinner_recipes = get_meal('dinner', int(dinner_calories * 0.8), int(dinner_calories * 1.2), filters)\n",
    "    snack_recipes = get_meal('snack', int(snack_calories * 0.8), int(snack_calories * 1.2), filters)\n",
    "\n",
    "    meals = {\n",
    "        \"Breakfast\": select_random_recipe(breakfast_recipes, feedback),\n",
    "        \"Lunch\": select_random_recipe(lunch_recipes, feedback),\n",
    "        \"Dinner\": select_random_recipe(dinner_recipes, feedback),\n",
    "        \"Snack\": select_random_recipe(snack_recipes, feedback)\n",
    "    }\n",
    "\n",
    "    def collect_nutrition(recipe):\n",
    "        if recipe:\n",
    "            return {\n",
    "                \"calories\": recipe['calories'],\n",
    "                \"protein\": recipe['totalNutrients']['PROCNT']['quantity'],\n",
    "                \"fat\": recipe['totalNutrients']['FAT']['quantity'],\n",
    "                \"carbs\": recipe['totalNutrients']['CHOCDF']['quantity']\n",
    "            }\n",
    "        return {\"calories\": 0, \"protein\": 0, \"fat\": 0, \"carbs\": 0}\n",
    "\n",
    "    nutrition = {\"calories\": 0, \"protein\": 0, \"fat\": 0, \"carbs\": 0}\n",
    "\n",
    "    for meal in meals.values():\n",
    "        meal_nutrition = collect_nutrition(meal)\n",
    "        nutrition['calories'] += meal_nutrition['calories']\n",
    "        nutrition['protein'] += meal_nutrition['protein']\n",
    "        nutrition['fat'] += meal_nutrition['fat']\n",
    "        nutrition['carbs'] += meal_nutrition['carbs']\n",
    "\n",
    "    return meals, nutrition\n",
    "\n",
    "# Route to submit feedback\n",
    "@app.route('/feedback', methods=['POST'])\n",
    "def feedback():\n",
    "    meal_label = request.form.get('meal_label')\n",
    "    feedback = request.form.get('feedback')\n",
    "    save_feedback(meal_label, feedback)\n",
    "    return '', 204\n",
    "\n",
    "# Route to generate and display the meal plan with a nutritional chart\n",
    "@app.route('/', methods=['GET', 'POST'])\n",
    "def index():\n",
    "    if request.method == 'POST':\n",
    "        daily_calorie_goal = int(request.form['calories'])\n",
    "        health_condition = request.form['health_condition']\n",
    "        ingredients_like = request.form['ingredients_like']\n",
    "        ingredients_dislike = request.form['ingredients_dislike']\n",
    "\n",
    "        filters = create_filters(health_condition, ingredients_like, ingredients_dislike)\n",
    "\n",
    "        monthly_plan = {}\n",
    "        monthly_nutrition = {\"calories\": [], \"protein\": [], \"fat\": [], \"carbs\": []}\n",
    "\n",
    "        for day in range(1, 31):\n",
    "            day_plan, nutrition = generate_day_plan(filters)\n",
    "            monthly_plan[day] = day_plan\n",
    "            monthly_nutrition[\"calories\"].append(nutrition[\"calories\"])\n",
    "            monthly_nutrition[\"protein\"].append(nutrition[\"protein\"])\n",
    "            monthly_nutrition[\"fat\"].append(nutrition[\"fat\"])\n",
    "            monthly_nutrition[\"carbs\"].append(nutrition[\"carbs\"])\n",
    "\n",
    "        days = list(range(1, 31))\n",
    "        fig = go.Figure()\n",
    "        fig.add_trace(go.Scatter(x=days, y=monthly_nutrition[\"calories\"], mode='lines+markers', name='Calories'))\n",
    "        fig.add_trace(go.Scatter(x=days, y=monthly_nutrition[\"protein\"], mode='lines+markers', name='Protein'))\n",
    "        fig.add_trace(go.Scatter(x=days, y=monthly_nutrition[\"fat\"], mode='lines+markers', name='Fat'))\n",
    "        fig.add_trace(go.Scatter(x=days, y=monthly_nutrition[\"carbs\"], mode='lines+markers', name='Carbs'))\n",
    "        fig.update_layout(title='Monthly Nutritional Analysis', xaxis_title='Day', yaxis_title='Nutrient Amount')\n",
    "\n",
    "        plot_div = fig.to_html(full_html=False)\n",
    "        return render_template('month_result.html', meal_plan=monthly_plan, plot_div=plot_div)\n",
    "\n",
    "    return render_template('index.html')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d45bcf18",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
